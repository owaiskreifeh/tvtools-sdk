#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("devtools-sdk:server");
var http = require("http");
var https = require("https");
var fs = require("fs");
var exec = require("child_process").exec;

/**
 * Get port from environment and store in Express.
 */

var httpsPort = normalizePort(443);
var httpPort = normalizePort(80);
app.set("port", httpsPort);

/**
 * Execute chii devtools
 */
//sudo chii start -s true -p 4004 -d tvtools.shahid.net:4004
var command = "sudo chii start -s true -p 4004 -d tvtools.shahid.net:4004";
exec(command, onExec);
function onExec(err, stdout, stderr) {
    if (err) {
        console.error(err);
        return;
    }
    console.log(stdout);
}

/**
 * Create HTTP and HTTPS server.
 */
var credentials = {
    key: fs.readFileSync(
        "/etc/letsencrypt/live/tvtools.shahid.net/privkey.pem"
    ),
    cert: fs.readFileSync(
        "/etc/letsencrypt/live/tvtools.shahid.net/fullchain.pem"
    ),
};
var httpServer = http.createServer(app);
var httpsServer = https.createServer(credentials, app);

/**
 * Listen on provided port, on all network interfaces.
 */

httpsServer.listen(httpsPort);
httpsServer.on("error", onError);
httpsServer.on("listening", onHttpsListening);

httpServer.listen(httpPort);
httpServer.on("error", onError);
httpServer.on("listening", onHttpListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind =
        typeof httpsPort === "string"
            ? "Pipe " + httpsPort
            : "Port " + httpsPort;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onHttpListening() {
    var addr = httpServer.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
}

/**
 * Event listener for HTTPS server "listening" event.
 */

function onHttpsListening() {
    var addr = httpsServer.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);
}
